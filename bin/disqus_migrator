#!/usr/bin/env ruby

require 'hexo_disqus_migrator'

require 'commander/import'

program :version, '0.0.1'
program :description, 'Disqus comments migrator for Hexo'

command :migrate do |c|
  c.syntax = 'migrator migrate [options]'
  c.summary = 'Generate Disqus URL mapping CSV'
  c.description = ''
  c.example 'description', 'command example'
  c.option '-i', '--input FILE', 'The csv generated by Disqus'
  c.option '-o', '--output FILE', 'Name pattern for generated CSV'
  c.option '-r', '--reports overview, unconfident, excluded, invalid', Array, 'Reports to be displayed'
  c.option '-R', '--report FILE', 'Write report to file'
  c.option '-u', '--[no-]unconfidient', 'Do/Don\' generate unconfident migrations'
  c.option '-c', '--[no-]confirm', 'Do/Don\'t confirm unconfident link one by one'
  c.option '-b', '--[no-]invalid', 'Do/Don\' generate invalid migrations'
  c.action do |args, options|
    options.default input: 'links.csv',
                    output: 'migration',
                    overview: true,
                    reports: %w(overview unconfident excluded invalid),
                    report: nil,
                    unconfidient: true,
                    verify: true,
                    invalid: false

    migrator = Migrator.new(options.input)

    migrator.migrate

    report = ''
    options.reports.each do |r|
      case r.downcase[0].to_sym
        when :o
          report += migrator.overview_report.render
        when :u
          report += migrator.unconfident_report.render
        when :e
          report += migrator.excluded_report.render
        when :i
          report += migrator.invalid_report.render
        else
          log 'error', "Invalid report #{r}"
      end
    end

    File.write options.report, report if options.report

    if options.verify
      migrator.confirm_unconfidents
    end

    migrator.write_confident options.output + '.csv'
    migrator.write_unconfident options.output + '.unconfident.csv' if options.unconfidient
    migrator.write_invalid options.output + '.invalid.csv' if options.invalid
  end
end

default_command :migrate
